import pygame, random, sys
from pygame.locals import *

WINDOWWIDTH = 800
WINDOWHEIGHT = 600
TEXTCOLOR = (255, 255, 255)
BACKGROUNDCOLOR = (204, 204, 255)
FPS = 40
BADDIEMINSIZE = 120
BADDIEMAXSIZE = 180
BADDIEMINSPEED = 5
BADDIEMAXSPEED = 8
ADDNEWBADDIERATE = 50
PLAYERMOVERATE = 10

#Música do jogo
pygame.mixer.init()
pygame.mixer.music.load('musica.mp3')
pygame.mixer.music.play(-1)

def terminate():
    # Finalizar o jogo
    pygame.quit()
    sys.exit()

def waitForPlayerToPressKey():
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    terminate()
                return

def playerHasHitBaddie(playerRect, baddies):
    # Identificar se o jogador atingiu a núvem
    for b in baddies:
        if playerRect.colliderect(b['rect']):
            return True
    return False

def drawText(text, font, surface, x, y):
    textobj = font.render(text, 1, TEXTCOLOR)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

pygame.init()
mainClock = pygame.time.Clock()
windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
pygame.display.set_caption('Caneta Azul')
pygame.mouse.set_visible(False)

font = pygame.font.SysFont('KristenITC', 32)

playerImage = pygame.image.load('mario.png')
playerRect = playerImage.get_rect()
baddieImage = pygame.image.load('nuvem.png')

windowSurface.fill(BACKGROUNDCOLOR)
drawText('Caneta Azul', font, windowSurface, (WINDOWWIDTH / 2.65), (WINDOWHEIGHT / 5))
drawText('Aperte uma tecla para começar', font, windowSurface, (WINDOWWIDTH / 4.25) - 30, (WINDOWHEIGHT / 3) + 60)
pygame.display.update()
waitForPlayerToPressKey()


MelhorPontuação = 0
while True:

    baddies = []
    Pontuação = 0
    playerRect.topleft = (WINDOWWIDTH / 2, WINDOWHEIGHT - 100)
    moveLeft = moveRight = moveUp = moveDown = False
    reverseCheat = slowCheat = False
    baddieAddCounter = 0

    while True:
        # Aumentar a pontuação
        Pontuação += 1

        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()

            if event.type == KEYDOWN:
                # Definindo as teclas
                if event.key == ord('z'):
                    reverseCheat = True
                if event.key == ord('x'):
                    slowCheat = True
                if event.key == K_LEFT or event.key == ord('a'):
                    moveRight = False
                    moveLeft = True
                if event.key == K_RIGHT or event.key == ord('d'):
                    moveLeft = False
                    moveRight = True
                if event.key == K_UP or event.key == ord('w'):
                    moveDown = False
                    moveUp = True
                if event.key == K_DOWN or event.key == ord('s'):
                    moveUp = False
                    moveDown = True

            if event.type == KEYUP:
                if event.key == ord('z'):
                    reverseCheat = False
                    Pontuação = 0
                if event.key == ord('x'):
                    slowCheat = False
                    Pontuação = 0
                if event.key == K_ESCAPE:
                        terminate()

                if event.key == K_LEFT or event.key == ord('a'):
                    moveLeft = False
                if event.key == K_RIGHT or event.key == ord('d'):
                    moveRight = False
                if event.key == K_UP or event.key == ord('w'):
                    moveUp = False
                if event.key == K_DOWN or event.key == ord('s'):
                    moveDown = False

            if event.type == MOUSEMOTION:

                playerRect.move_ip(event.pos[0] - playerRect.centerx, event.pos[1] - playerRect.centery)

        if not reverseCheat and not slowCheat:
            baddieAddCounter += 1
        if baddieAddCounter == ADDNEWBADDIERATE:
            baddieAddCounter = 0
            baddieSize = random.randint(BADDIEMINSIZE, BADDIEMAXSIZE)
            newBaddie = {'rect': pygame.Rect(random.randint(0, WINDOWWIDTH-baddieSize), 0 - baddieSize, baddieSize, baddieSize),
                        'speed': random.randint(BADDIEMINSPEED, BADDIEMAXSPEED),
                        'surface':pygame.transform.scale(baddieImage, (baddieSize, baddieSize)),
                        }

            baddies.append(newBaddie)

        if moveLeft and playerRect.left > 0:
            playerRect.move_ip(-1 * PLAYERMOVERATE, 0)
        if moveRight and playerRect.right < WINDOWWIDTH:
            playerRect.move_ip(PLAYERMOVERATE, 0)
        if moveUp and playerRect.top > 0:
            playerRect.move_ip(0, -1 * PLAYERMOVERATE)
        if moveDown and playerRect.bottom < WINDOWHEIGHT:
            playerRect.move_ip(0, PLAYERMOVERATE)

        pygame.mouse.set_pos(playerRect.centerx, playerRect.centery)

        for b in baddies:
            if not reverseCheat and not slowCheat:
                b['rect'].move_ip(0, b['speed'])
            elif reverseCheat:
                b['rect'].move_ip(0, -5)
            elif slowCheat:
                b['rect'].move_ip(0, 1)

        for b in baddies[:]:
            if b['rect'].top > WINDOWHEIGHT:
                baddies.remove(b)

        windowSurface.fill(BACKGROUNDCOLOR)

        drawText('Pontuação: %s' % (Pontuação), font, windowSurface, 10, 0)
        drawText('Melhor Pontuação: %s' % (MelhorPontuação), font, windowSurface, 10, 40)

        # Desenhar o personagem
        windowSurface.blit(playerImage, playerRect)

        # Desenhar as núvens
        for b in baddies:
            windowSurface.blit(b['surface'], b['rect'])

        pygame.display.update()

        if playerHasHitBaddie(playerRect, baddies):
            if Pontuação > MelhorPontuação:
                MelhorPontuação = Pontuação
            break

        mainClock.tick(FPS)

    windowSurface.fill(BACKGROUNDCOLOR)
    drawText('Fim de jogo', font, windowSurface, (WINDOWWIDTH / 2.55), (WINDOWHEIGHT / 4))
    drawText('Aperte uma tecla para jogar novamente', font, windowSurface, (WINDOWWIDTH / 4.45) - 80, (WINDOWHEIGHT / 3) + 50)
    pygame.display.update()
    waitForPlayerToPressKey()
